% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R, R/ggdmc_likelihood.R
\name{density_norm}
\alias{density_norm}
\alias{density_norm_pda}
\alias{density_norm_gpu}
\alias{density_plba1}
\alias{density_plba0_gpu}
\alias{density_plba1_gpu}
\alias{likelihood_norm}
\alias{likelihood_norm_pda}
\alias{likelihood_rd}
\title{likelihood.dmc for lba_B}
\usage{
density_norm(pVec, pnames, allpar, parnames, model, type, dim1, dim2, dim3,
  n1idx, ise, cellidx, RT, matchcell, isr1)

density_norm_pda(pVec, pnames, allpar, parnames, model, type, dim1, dim2, dim3,
  n1idx, ise, cellidx, RT, matchcell, isr1, nsim = 16384L, bw = 0.01,
  debug = FALSE)

density_norm_gpu(pVec, pnames, allpar, parnames, model, type, dim1, dim2, dim3,
  n1idx, ise, cellidx, RT, matchcell, isr1, nsim = 16384L, bw = 0.01,
  gpuid = 0L, nthread = 32L, debug = FALSE)

density_plba1(pVec, pnames, allpar, parnames, model, type, dim1, dim2, dim3,
  n1idx, ise, cellidx, RT, matchcell, isr1, nsim = 16384L, bw = 0.01,
  ncore = 1L, debug = FALSE)

density_plba0_gpu(pVec, pnames, allpar, parnames, model, type, dim1, dim2, dim3,
  n1idx, ise, cellidx, RT, matchcell, isr1, nsim = 16384L, bw = 0.01,
  ncore = 1L, gpuid = 0L, nthread = 32L, debug = FALSE)

density_plba1_gpu(pVec, pnames, allpar, parnames, model, type, dim1, dim2, dim3,
  n1idx, ise, cellidx, RT, matchcell, isr1, nsim = 16384L, bw = 0.01,
  ncore = 1L, gpuid = 0L, nthread = 32L, debug = FALSE)

likelihood_norm(p.vector, data, min.like = 1e-10)

likelihood_norm_pda(p.vector, data, min.like = 1e-10)

likelihood_rd(p.vector, data, min.like = 1e-10)
}
\arguments{
\item{p.vector}{parameter vector}

\item{data}{data model instance}

\item{min.like}{minimal likelihood. 1e-10 is the default}
}
\value{
a vector
}
\description{
The likelihood function for LBA type norm, used in DMC.
}
\examples{
model <- ggdmc:::BuildModel(
p.map     = list(A = "1", B = "1", t0 = "1", mean_v = "M", sd_v = "1", st0 = "1"),
match.map = list(M = list(s1 = 1, s2 = 2)),
factors   = list(S = c("s1", "s2")),
constants = c(st0 = 0, sd_v = 1),
responses = c("r1", "r2"),
type      = "norm")

p.vector <- c(A = .25, B = .35,  t0 = .2, mean_v.true = 1, mean_v.false = .25)

sim1 <- ggdmc:::simulate.model(model, p.vector, 1024)
data <- ggdmc:::BindDataModel(sim1, model)

model    <- attr(data, "model")
ise      <- attr(data, "cell.empty")
allpar   <- attr(model, "all.par")
parnames <- attr(model, "par.names")
type     <- attr(model, "type")
n1idx    <- attr(model, "n1.order")
mc       <- attr(model, "match.cell")
isr1     <- ggdmc:::check_rd(type, model)
cellidx  <- ggdmc:::cellidxmat(data)
pnames   <- names(p.vector)
matchcell<- attr(model, "match.cell")

\dontrun{
setwd("/media/yslin/MERLIN/Documents/DMC-PDA/dmc-amsterdam17/")
source ("dmc/dmc.R")
load_model ("LBA","lba_B.R")

den1 <- likelihood_norm(p.vector, data)
den2 <- likelihood.dmc(p.vector, data)
den3 <- density_norm(p.vector, pnames, allpar, parnames, model, type,
dimnames(model)[[1]], dimnames(model)[[2]], dimnames(model)[[3]],
n1idx, ise, cellidx, data$RT, matchcell, isr1)

all.equal(den1, den2)
all.equal(den2, den3[,1])
## all TRUEs
}
}
