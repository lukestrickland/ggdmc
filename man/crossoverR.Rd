% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ggdmc_sampling.R
\name{crossoverR}
\alias{crossoverR}
\title{DE-MC Crossover and Migrate Samplers}
\usage{
crossoverR(k, pars, use.theta, use.logprior, use.loglike, p.prior, data,
  rp = 0.001, gamma.mult = 2.38, force = FALSE)
}
\arguments{
\item{k}{the index of a current processed chain. This must be an integer.}

\item{pars}{an integer vector storing parameter index. For example if
\code{pvec <- c(a = 1.15, v.f1 = 1.25, v.f2 = 1.85, z = 0.55, sz = 0.15,
sv = 0.32, t0 = 0.25)}, pars is \code{c(1:7)}.}

\item{use.theta}{a nchain x npar named matrix.}

\item{use.logprior}{a \code{nchain} length summed and logged prior vector.
Each element is the sum-log prior likelihood for a chain.}

\item{use.loglike}{a \code{nchain} length logged model likelihood. Each
element is logged model likelihood for a chain.}

\item{p.prior}{prior list created by prior.p.dmc}

\item{data}{data model instance}

\item{rp}{tuning parameter for DEMC. Default is 0.001.}

\item{gamma.mult}{turning parameter for DEMC. Default is 2.38}

\item{force}{use only for PDA method, a likelihood re-calculation interval}
}
\value{
crossover returns a column named vector, representing the crossover
result for a chain. migrate returns a column named matrix, representing the
migration result for all chains.
}
\description{
\code{crossoverR} and \code{migrateR} are two R prototypes of DE-MC
samplers, created by AH. \code{crossover} and \code{migrate} derive from
\code{crossoverR} and \code{migrateR} are optimised C++ DE-MC samplers.
\code{crossoverR} updates one chain at a time at the data level.
\code{crossover} updates all chains at once in a C++ for loop.
\code{migrateR} updates all chains together at the data level.
}
\examples{
require(ggdmc)
m1 <- model.dmc(
  p.map     = list(a="1", v="1", z="1", d="1", sz="1", sv="1", t0="1",
                   st0="1"),
  constants = c(st0=0, d=0),
  match.map = list(M = list(s1="r1", s2="r2")),
  factors   = list(S = c("s1", "s2")),
  responses = c("r1", "r2"),
  type      = "rd")

pvec1 <- c(a = 1, v = 1, z = .5, sz = .25, sv = .2,t0 = .15)
dat1  <- simulate(m1, pvec1, 512)
mdi1  <- BindDataModel(dat1, m1)

prior1 <- prior.p.dmc(
  dists = rep("tnorm", 6),
  p1    = c(a=2,  v=2.5, z=.5, sz=.3, sv=1,  t0=.3),
  p2    = c(a=.5, v=.5,  z=.1, sz=.1, sv=.3, t0=.05),
  lower = c(0,-5, 0, 0, 0, 0),
  upper = c(5, 7, 2, 2, 2, 2))

system.time(s0 <- run(samples.dmc(1e2, prior1, mdi1), report = 1e2,
p.migrate = .05))

pars <- 1:s0$n.pars
th <- s0$theta[,, s0$start]
lp <- s0$summed_log_prior[s0$start,]
ll <- s0$log_likelihoods[s0$start,]
prior <- s0$p.prior
dat <- s0$data
rp <- s0$rp
force <- FALSE
gm <- 2.38

res1 <- crossover(1, pars, th, lp, ll, prior, dat, rp, force, gm)
res2 <- migrate(th, lp, ll, p.prior, data, rp)

print(res1)
##    lp       ll        a        v        z       sz       sv       t0
## -1.60 -9727.18     1.94     1.36     0.43     0.07     0.69     0.26

print(res2)
##          lp          ll     a    v    z   sz   sv   t0
##       -0.02    -4765.14  2.33 2.04 0.56 0.43 1.45 0.20
##       -1.58    -9744.38  1.94 1.36 0.43 0.07 0.69 0.26
##        3.50   -12782.53  2.35 2.89 0.56 0.26 0.75 0.31
##        1.18   -12134.66  1.00 2.66 0.58 0.27 1.39 0.33
##        0.20    -8061.58  2.55 2.93 0.71 0.30 0.95 0.22
##        0.20    -7996.31  2.54 2.93 0.71 0.29 0.95 0.22
##        1.97   -12600.06  2.14 2.53 0.35 0.47 1.01 0.33
##        3.30   -12587.68  1.71 2.67 0.50 0.39 0.69 0.33
##        1.96    -9775.30  1.64 2.44 0.43 0.26 1.61 0.28
##        3.30   -12583.47  1.71 2.67 0.50 0.39 0.69 0.33
##        3.98   -11536.49  2.35 2.36 0.55 0.37 0.94 0.29
##        2.98   -11872.35  2.62 2.96 0.51 0.35 0.75 0.29
##        1.97    -8572.99  1.87 3.01 0.36 0.19 0.89 0.25
##        3.91   -10199.54  1.62 2.10 0.55 0.29 1.02 0.29
##        3.91   -10210.39  1.62 2.10 0.55 0.29 1.02 0.29
##        3.61   -13393.09  1.74 2.59 0.58 0.29 0.78 0.34
##        2.68    -6582.30  2.14 2.27 0.41 0.30 0.86 0.22
##       -0.03    -4699.96  2.33 2.03 0.56 0.43 1.45 0.20

## New crossover
s0 <- ggdmc:::samples(100, p.prior, data, 4, verbose = TRUE)
useTheta <- s0$theta[,,1]
useLogPrior <- s0$summed_log_prior[1, ]
useLogLike <- s0$log_likelihoods[1, ]
pnames <- names(p.prior)

dists <- numeric(length(p.prior))
p1 <- numeric(length(p.prior))
p2 <- numeric(length(p.prior))
lower <- numeric(length(p.prior))
upper <- numeric(length(p.prior))
islog <- numeric(length(p.prior))
for(i in 1:length(p.prior)) dists[i] <- attr(p.prior[[i]], "dist")
for(i in 1:length(p.prior)) p1[i] <- p.prior[[i]][1][[1]]
for(i in 1:length(p.prior)) p2[i] <- p.prior[[i]][2][[1]]
for(i in 1:length(p.prior)) lower[i] <- p.prior[[i]][3][[1]]
for(i in 1:length(p.prior)) upper[i] <- p.prior[[i]][4][[1]]
for(i in 1:length(p.prior)) islog[i] <- p.prior[[i]][5][[1]]


model    <- attr(data, "model")
ise      <- attr(data, "cell.empty")
allpar   <- attr(model, "all.par")
parnames <- attr(model, "par.names")
type     <- attr(model, "type")
dim1 <- dimnames(model)[[1]]
dim2 <- dimnames(model)[[2]]
dim3 <- dimnames(model)[[3]]
n1idx    <- attr(model, "n1.order")
isr1     <- ggdmc:::check_rd(type, model)
cellidx  <- ggdmc:::cellidxmat(data)
matchcell<- attr(model, "match.cell")
RT <- data$RT


tmp <- ggdmc:::crossover(useTheta, useLogPrior, useLogLike, pnames, dists,
                         p1, p2, lower, upper, islog,
                         allpar, parnames, model, type, dim1, dim2, dim3,
                         n1idx, ise, cellidx, RT,
                         matchcell, isr1, .001, 2.38, FALSE, 16384, .01)

}
\seealso{
prior.p.dmc
}
