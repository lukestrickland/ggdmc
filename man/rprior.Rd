% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R, R/ggdmc_prior.R
\name{rprior_scalar}
\alias{rprior_scalar}
\alias{rprior_mat}
\alias{rprior_vec}
\alias{rprior}
\title{Parameter Prior Distributions}
\usage{
rprior_scalar(prior)

rprior_mat(prior, n)

rprior_vec(dists, p1, p2, lower, upper)

rprior(p.prior, n = 1)
}
\arguments{
\item{n}{number of observations/random draws}

\item{dists}{dists argument in BuildPrior}

\item{p1}{p1 argument in prior.p.dmc}

\item{p2}{p2 argument in prior.p.dmc}

\item{lower}{lower argument in prior.p.dmc}

\item{upper}{upper argument in prior.p.dmc}

\item{p.prior}{a list of list usually created by BuildPrior to store the
information about parameter prior distributions.}

\item{pvec}{a parameter vector}
}
\value{
\code{rprior_vec} gives a column vector; \code{rprior} gives a
matrix; \code{rprior} gives a \code{n x npar} named numeric
matrix; \code{rprior_scalar} gives a named numeric vector.
\code{sum_log_prior} gives prior likelihood.
}
\description{
Probability density functions and random generation for parameter prior
distributions. \code{rprior} is a faster compatible function, like
\code{rprior.dmc} in \code{DMC}. It is a wrapper function for
\code{rprior_scalar} and \code{rprior_mat} functions.
\code{rprior_scalar} matches five strings:
\code{tnorm}, \code{beta_lu}, \code{gamma_l}, \code{lnorm_l}, and
\code{constant} to select a random functions.
}
\examples{
p.prior <- ggdmc::BuildPrior(
 dists = c("tnorm", "tnorm", "beta", "tnorm", "beta", "beta"),
 p1    = c(a = 1, v = 0, z = 1, sz = 1, sv = 1, t0 = 1),
 p2    = c(a = 1, v = 2, z = 1, sz = 1, sv = 1, t0 = 1),
 lower = c(0,-5, NA, NA, 0, NA),
 upper = c(2, 5, NA, NA, 2, NA))

rprior(p.prior, 9)
##               a           v         z         sz        sv         t0
## [1,] 0.97413686  0.78446178 0.9975199 -0.5264946 0.5364492 0.55415052
## [2,] 0.72870190  0.97151662 0.8516604  1.6008591 0.3399731 0.96520848
## [3,] 1.63153685  1.96586939 0.9260939  0.7041254 0.4138329 0.78367440
## [4,] 1.55866180  1.43657110 0.6152371  0.1290078 0.2957604 0.23027759
## [5,] 1.32520281 -0.07328408 0.2051155  2.4040387 0.9663111 0.06127237
## [6,] 0.49628528 -0.19374770 0.5142829  2.1452972 0.4335482 0.38410626
## [7,] 0.03655549  0.77223432 0.1739831  1.4431507 0.6257398 0.63228368
## [8,] 0.71197612 -1.15798082 0.8265523  0.3813370 0.4465184 0.23955415
## [9,] 0.38049166  3.32132034 0.9888108  0.9684292 0.8437480 0.13502154

pvec <- c(a=1, v=1, z=0.5, sz=0.25, sv=0.2,t0=.15)
p.prior  <- BuildPrior(
  dists = rep("tnorm", 6),
  p1    = c(a=2,   v=2.5, z=0.5, sz=0.3, sv=1,  t0=0.3),
  p2    = c(a=0.5, v=.5,  z=0.1, sz=0.1, sv=.3, t0=0.05) * 5,
  lower = c(0,-5, 0, 0, 0, 0),
  upper = c(5, 7, 2, 2, 2, 2))

## summed_log_prior(pvec, p.prior)

\dontrun{
setwd("/home/yslin/Documents/dmc-amsterdam17/")
source("dmc/dmc.R")
load_model("LBA", "lba_B.R")
require(microbenchmark)
res <- microbenchmark(ggdmc::rprior(prior1, 6),
                      rprior.dmc(prior1, 6),  times=1e3)
}

## Unit: microseconds
##                     expr         min       lq      mean   median
## ggdmc::rprior(prior1, 6)      29.964  33.7350  39.92127  42.4295
## rprior.dmc(prior1, 6)        307.585 343.8335 372.32580 359.2680
##       uq      max neval
##  44.7700   98.897  1000
## 376.3445 2446.987  1000
}
