% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{dprior_}
\alias{dprior_}
\title{Prior Probability Density}
\usage{
dprior_(pvec, dists, p1, p2, lower, upper, islog)
}
\arguments{
\item{p.vector}{the user's supplied parameter vector or a sampler supplied
theta/phi vector.}

\item{p.prior}{a list of list usually created by prior.p.dmc to store the
distributional setting for prior parameters.}
}
\value{
a named double vector with probability densities for each model
parameter
}
\description{
\code{logprior} is a C++ function. It
matches five string types: \code{tnorm}, \code{beta_lu}, \code{gamma_l},
\code{lnorm_l}, and \code{constant} to determine which density functions to
call (via R API). For truncated normal density, \code{logprior} calls
\code{dtn_scalar} (internal dtnorm) to get probability densities from the
truncated normal distribution. Whether taking logarithm of the probability
density is determined by the boolean \code{log} sent in via
\code{prior.p.dmc}. By default, \code{prior.p.dmc} sets \code{log} to 1.
}
\examples{
## Use Drift-diffusion model as an example
prior1 <- BuildPrior(
  dists = c("tnorm", "tnorm", "beta", "tnorm", "beta", "beta"),
  p1    = c(a = 1, v = 0, z = 1, sz = 1, sv = 1, t0 = 1),
  p2    = c(a = 1, v = 2, z = 1, sz = 1, sv = 1, t0 = 1),
  lower = c(0,-5, NA, NA, 0, NA),
  upper = c(2, 5, NA, NA, 2, NA))

ggdmc::view(prior1)
##      mean sd lower upper log    dist  untrans
##   a     1  1     0     2   1   tnorm identity
##   v     0  2    -5     5   1   tnorm identity
##   z     1  1     0     1   1 beta_lu identity
##   sz    1  1  -Inf   Inf   1   tnorm identity
##   sv    1  1     0     2   1 beta_lu identity
##   t0    1  1     0     1   1 beta_lu identity

dists = c("tnorm", "tnorm", "beta", "tnorm", "beta", "beta")
p1    = c(a = 1, v = 0, z = 1, sz = 1, sv = 1, t0 = 1)
p2    = c(a = 1, v = 2, z = 1, sz = 1, sv = 1, t0 = 1)
lower = c(0,-5, NA, NA, 0, NA)
upper = c(2, 5, NA, NA, 2, NA)
islog = rep(1, 6)
pVec1 <- c(a=1.15, v=-0.10, z=0.74, sz=1.23, sv=0.11, t0=0.87)
pnames <- names(pVec1)

\dontrun{
setwd("~/Documents/DMC_10052017")
source ("dmc/dmc.R")
source ("dmc/dmc_myfunction.R")
source ("dmc/models/LBA/dists.R")
source ("dmc/models/LBA/lba_B.R")
}

ggdmc::logprior(pVec1, prior1)
ggdmc::dprior(pVec1, names(pVec1), dists, p1,p2, lower, upper, islog)
\dontrun{ log.prior.dmc(pVec1, prior1) }
##         a          v          z         sz         sv         t0
##-0.5484734 -1.6008386  0.0000000 -0.9453885  0.0000000  0.0000000
summed.log.prior(pVec1, prior1)

\dontrun{
res <- microbenchmark::microbenchmark(
  ggdmc::logprior(pVec1, prior1),
  ggdmc::dprior(pVec1, pnames, dists, p1,p2, lower, upper, islog),
  log.prior.dmc(pVec1, prior1), times = 1e3)
}

## Use LBA model as an example
prior2 <- ggdmc:::prior.p.dmc(
  dists = c("tnorm", "tnorm", "tnorm", "tnorm", "tnorm", "tnorm"),
  p1    = c(A=.4, B=.6, mean_v.true=1,  mean_v.false=0,  sd_v.true=.5, t0=.3),
  p2    = c(A=.1, B=.1, mean_v.true=.2, mean_v.false=.2, sd_v.true=.1, t0=.05),
  lower = c(0,   0, NA, NA, 0, .1),
  upper = c(NA, NA, NA, NA, NA, 1))

pVec2 <- c(A=0.398, B=0.614, mean_v.true=1.040,
  mean_v.false=-0.032, sd_v.true=0.485, t0=0.271)

dists = c("tnorm", "tnorm", "tnorm", "tnorm", "tnorm", "tnorm")
p1    = c(A=.4, B=.6, mean_v.true=1,  mean_v.false=0,  sd_v.true=.5, t0=.3)
p2    = c(A=.1, B=.1, mean_v.true=.2, mean_v.false=.2, sd_v.true=.1, t0=.05)
lower = c(0,   0, NA, NA, 0, .1)
upper = c(NA, NA, NA, NA, NA, 1)
islog = rep(1, 6)
pnames <- names(pVec2)


ggdmc::logprior(pVec2, prior2)
ggdmc::dprior(pVec2, pnames, dists, p1,p2, lower, upper, islog)
##    A       B  mean_v.true  mean_v.false    sd_v.true      t0
## 1.38    1.37         0.67          0.68         1.37    1.91
summed.log.prior(pVec2, prior2)

\dontrun{
log.prior.dmc(pVec2, prior2)
res <- microbenchmark::microbenchmark(
  ggdmc::logprior(pVec2, prior2),
  ggdmc::dprior(pVec2, pnames, dists, p1,p2, lower, upper, islog),
  times = 1e3)
}
## Unit: microseconds
##                 expr     min      lq      mean   median      uq      max
## ggdmc::logpriordmc    10.966  12.154  13.92842   13.132  15.646   28.776
## ggdmc:::log.prior.dmc  9.081  10.617  12.28825   11.595  14.109   77.875
## ggdmc::dprior         10.128  11.665  13.55588   12.712  15.226   71.170
## log.prior.dmc         96.173 102.774 108.06765  105.533 107.628 2080.882
}
