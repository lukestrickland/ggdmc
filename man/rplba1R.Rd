% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R, R/ggdmc_random.R
\name{rplba0}
\alias{rplba0}
\alias{rplba1}
\alias{rplba1_test}
\alias{rplba2}
\alias{rplba2_test}
\alias{rplba3}
\alias{n1PDF_plba1}
\alias{n1PDF_plba2}
\alias{n1PDF_plba3}
\alias{rplba1R}
\alias{rplba2R}
\alias{rplbaR3}
\title{Piecewise LBA Model Type 1 and Type 2}
\usage{
rplba0(n, A, b, t0, mean_v, mean_w, sd_v, rD, swt, ncore = 1L,
  debug = FALSE)

rplba1(n, A, b, t0, mean_v, mean_w, sd_v, rD, swt, ncore = 1L,
  debug = FALSE)

rplba1_test(n, A, b, t0, mean_v, mean_w, sd_v, rD, swt, debug = FALSE)

rplba2(n, A, b, t0, mean_v, mean_w, sd_v, sd_w, rD, swt, ncore = 1L,
  debug = FALSE)

rplba2_test(n, A, b, t0, mean_v, mean_w, sd_v, sd_w, rD, swt, ncore = 1L,
  debug = FALSE)

rplba3(n, A, B, C, mean_v, mean_w, sd_v, sd_w, rD, tD, swt, t0)

n1PDF_plba1(x, A, b, mean_v, sd_v, t0, mean_w, rD, swt, n, h, ncore, debug)

n1PDF_plba2(x, A, b, mean_v, sd_v, t0, mean_w, sd_w, rD, swt, n, h, ncore,
  debug)

n1PDF_plba3(x, n, A, B, C, mean_v, sd_v, mean_w, sd_w, rD, tD, swt, t0, h)

rplba1R(n, A, b, t0, mean_v, mean_w, sd_v, rD, swt)

rplba2R(n, A, b, t0, mean_v, mean_w, sd_v, sd_w, rD, swt)

rplbaR3(n = 10, pVec = c(A1 = 1.5, A2 = 1.5, B1 = 1.2, B2 = 1.2, C1 = 0.3,
  C2 = 0.3, v1 = 3.32, v2 = 2.24, w1 = 1.51, w2 = 3.69, sv1 = 1, sv2 = 1, sw1 =
  1, sw2 = 1, rD = 0.3, tD = 0.3, swt = 0.5, t0 = 0.08))
}
\arguments{
\item{n}{number of observations.}

\item{A}{upper bound of start point. Can be an integer a 2-element vector.}

\item{b}{threshold. Can be an integer a 2-element vector.}

\item{t0}{nondecision time}

\item{mean_v}{piece 1 mean drift rate. Should be a 2-element vector}

\item{mean_w}{piece 2 mean drift rate. Should be a 2-element vector}

\item{sd_v}{common standard deviation of the piece 1 drift rates. If
sd_w is not present, this will be used as the piece 2 drift rate sd,
too. Negative value is not allowed.}

\item{rD}{rate delay}

\item{swt}{switch time}

\item{ncore}{number of CPU cores for running Open MP.}

\item{debug}{internal debug switch}

\item{sd_w}{standard deviation of the piece 2 drift rates for}

\item{x}{vector of quantiles.}

\item{h}{bandwidth}
}
\value{
a [RT R] matrix (C) or a data frame (R)
}
\description{
Density and random generation for the PLBA Model Type 1 and Type 2.
}
\examples{
#############20
## rplba1    ##
#############20
\dontrun{
n <- 2^20; n
A <- 1.5
b <- 2.7
mean_v <- c(3.3, 2.2)
mean_w <- c(1.5, 3.7)
sd_v <- c(1, 1)
rD  <- .3
swt <- .5
t0  <- .08
ncore <- 12
dat1 <- ggdmc:::rplba1R(n, A, b, t0, mean_v, mean_w, sd_v, rD, swt)
dat2 <- ggdmc:::rplba1(n, A, b, t0, mean_v, mean_w, sd_v, rD, swt, ncore)
dat3 <- gpda:::rplba1(n, A, b, t0, mean_v, mean_w, sd_v, rD, swt)
dat4 <- ggdmc:::rplba1_test(n, A, b, t0, mean_v, mean_w, sd_v, rD, swt)

dat1r1 <- dat1[dat1[, 2] == 1, 1]
dat1r2 <- dat1[dat1[, 2] == 2, 1]
dat2r1 <- dat2[dat2[, 2] == 1, 1]
dat2r2 <- dat2[dat2[, 2] == 2, 1]
dat3r1 <- dat3[dat3[, 2] == 1, 1]
dat3r2 <- dat3[dat3[, 2] == 2, 1]
dat4r1 <- dat4[dat4[, 2] == 1, 1]
dat4r2 <- dat4[dat4[, 2] == 2, 1]

xlim <- c(0, 3)
## Check if two methods produce SPDF overlaping with each other
par(mfrow = c(4, 2), mar = c(4, 5.3, 0.82, 1))
hist(dat1r1, breaks = "fd", freq = FALSE, main = "Choice1 R", xlim = xlim)
hist(dat1r2, breaks = "fd", freq = FALSE, main = "Choice2 R", xlim = xlim)
hist(dat2r1, breaks = "fd", freq = FALSE, main = "Choice1 C++", xlim = xlim)
hist(dat2r2, breaks = "fd", freq = FALSE, main = "Choice2 C++", xlim = xlim)
hist(dat3r1, breaks = "fd", freq = FALSE, main = "Choice1 GPU", xlim = xlim)
hist(dat3r2, breaks = "fd", freq = FALSE, main = "Choice2 GPU", xlim = xlim)
hist(dat4r1, breaks = "fd", freq = FALSE, main = "Choice1 test", xlim = xlim)
hist(dat4r2, breaks = "fd", freq = FALSE, main = "Choice2 test", xlim = xlim)

par(mfrow = c(1, 2))
hist(dat1r1, breaks = "fd", freq = FALSE, main = "Choice1 R, C++, & GPU",
  xlim = xlim, ylim = c(0, 3))
hist(dat2r1, breaks = "fd", freq = FALSE, add = TRUE, col = "lightblue")
hist(dat3r1, breaks = "fd", freq = FALSE, add = TRUE, col = "lightgreen")

hist(dat1r2, breaks = "fd", freq = FALSE, main = "Choice2 R, C++ & GPU",
  xlim = xlim, ylim = c(0, 3))
hist(dat2r2, breaks = "fd", freq = FALSE, add = TRUE, col = "lightblue")
hist(dat3r2, breaks = "fd", freq = FALSE, add = TRUE, col = "lightgreen")


library(rbenchmark)
res <- benchmark(r1 = ggdmc:::rplba1R(n, A, b, t0, mean_v, mean_w, sd_v, rD, swt),
  r2 = ggdmc:::rplba1(n, A, b, t0, mean_v, mean_w, sd_v, rD, swt),
  r3 = gpda:::rplba1(n, A, b, t0, mean_v, mean_w, sd_v, rD, swt),
  replications = 10)

print(res[,1:4])

# test replications elapsed relative
#   r1           10   2.830  134.762
#   r2           10   0.435   20.714
#   r3           10   0.021    1.000
#  --------------------------------#
#   r1           10  19.356  186.115
#   r2           10   2.946   28.327
#   r3           10   0.104    1.000

res <- benchmark(r1 = ggdmc:::rplba1_test(n, A, b, t0, mean_v, mean_w, sd_v, rD, swt),
                 r2 = ggdmc:::rplba1(n, A, b, t0, mean_v, mean_w, sd_v, rD, swt, core),
                 replications = 10)

print(res[,1:4])
## test replications elapsed relative
##   r1           10   3.484    1.177
##   r2           10   2.959    1.000
}

#############20
## rplba2    ##
#############20
\dontrun{
n <- 2^15
ncore <- 4
A <- c(1.5, 1.5)
b <- c(2.7, 2.7)
mean_v <- c(3.3, 2.2)
mean_w <- c(1.5, 3.7)
sd_v <- c(1, 1)
sd_w <- c(1, 1)
rD <- .3
swt <- .5
t0 <- .08
dat1 <- ggdmc:::rplba2R(n, A, b, t0, mean_v, mean_w, sd_v, sd_w, rD, swt)
dat2 <- ggdmc:::rplba2(n, A, b, t0, mean_v, mean_w, sd_v, sd_w, rD, swt, ncore)
dat3 <- gpda:::rplba2(n, A, b, t0, mean_v, mean_w, sd_v, sd_w, rD, swt)
dat4 <- ggdmc:::rplba2_test(n, A, b, t0, mean_v, mean_w, sd_v, sd_w, rD, swt)

dat1r1 <- dat1[dat1[, 2] == 1, 1]
dat1r2 <- dat1[dat1[, 2] == 2, 1]
dat2r1 <- dat2[dat2[, 2] == 1, 1]
dat2r2 <- dat2[dat2[, 2] == 2, 1]
dat3r1 <- dat3[dat3[, 2] == 1, 1]
dat3r2 <- dat3[dat3[, 2] == 2, 1]
dat4r1 <- dat4[dat4[, 2] == 1, 1]
dat4r2 <- dat4[dat4[, 2] == 2, 1]

wesanderson::wes_palette("Royal1")
palettes  <- wesanderson::wes_palettes$GrandBudapest
palettes2 <- wesanderson::wes_palettes$GrandBudapest2
xlim <- c(0, 3)
## Check if two methods produce SPDF overlaping with each other
par(mfrow = c(4, 2), mar = c(4, 5.3, 0.82, 1))
hist(dat1r1, breaks = "fd", freq = FALSE, main = "Choice1 R", xlim = xlim)
hist(dat1r2, breaks = "fd", freq = FALSE, main = "Choice2 R", xlim = xlim)
hist(dat2r1, breaks = "fd", freq = FALSE, main = "Choice1 C++", xlim = xlim)
hist(dat2r2, breaks = "fd", freq = FALSE, main = "Choice2 C++", xlim = xlim)
hist(dat3r1, breaks = "fd", freq = FALSE, main = "Choice1 GPU", xlim = xlim)
hist(dat3r2, breaks = "fd", freq = FALSE, main = "Choice2 GPU", xlim = xlim)
hist(dat4r1, breaks = "fd", freq = FALSE, main = "Choice1 test", xlim = xlim)
hist(dat4r2, breaks = "fd", freq = FALSE, main = "Choice2 test", xlim = xlim)

par(mfrow = c(1, 2))
hist(dat1r1, breaks = "fd", freq = FALSE, main = "Choice1 R, C++, & GPU",
  xlim = xlim, ylim = c(0, 3))
hist(dat2r1, breaks = "fd", freq = FALSE, add = TRUE, col = palettes[1])
hist(dat3r1, breaks = "fd", freq = FALSE, add = TRUE, col = palettes[2])
hist(dat4r1, breaks = "fd", freq = FALSE, add = TRUE, col = palettes[4])

hist(dat1r2, breaks = "fd", freq = FALSE, main = "Choice2 R, C++ & GPU",
  xlim = xlim, ylim = c(0, 3))
hist(dat2r2, breaks = "fd", freq = FALSE, add = TRUE, col = palettes2[1])
hist(dat3r2, breaks = "fd", freq = FALSE, add = TRUE, col = palettes2[2])
hist(dat4r2, breaks = "fd", freq = FALSE, add = TRUE, col = palettes2[3])

library(rbenchmark)
res <- benchmark(r1 = ggdmc:::rplba2R(n, A, b, t0, mean_v, mean_w, sd_v, sd_w, rD, swt),
  r2 = ggdmc:::rplba2(n, A, b, t0, mean_v, mean_w, sd_v, sd_w, rD, swt, ncore),
  r3 = gpda:::rplba2(n, A, b, t0, mean_v, mean_w, sd_v, sd_w, rD, swt),
  replications = 10)

print(res[,1:4])
## test replications elapsed relative
##   r1           10   0.480   30.000
##   r2           10   0.077    4.813
##   r3           10   0.016    1.000

library(rbenchmark)
res <- benchmark(r1 = ggdmc:::rplba2R(n, A, b, t0, mean_v, mean_w, sd_v, sd_w, rD, swt),
                 r2 = ggdmc:::rplba2(n, A, b, t0, mean_v, mean_w, sd_v, sd_w, rD, swt),
                 replications = 10)

print(res[,1:4])
## test replications elapsed relative
##   r1           10  25.454    8.415
##   r2           10   3.025    1.000

library(rbenchmark)
n <- 2^23
ncore <- 4
res <- benchmark(r1 = ggdmc:::rplba2_test(n, A, b, t0, mean_v, mean_w, sd_v,
                                          sd_w, rD, swt),
                 r2 = ggdmc:::rplba2(n, A, b, t0, mean_v, mean_w, sd_v,
                 sd_w, rD, swt, ncore, FALSE),
                 replications = 10)

print(res[,1:4])
## test replications elapsed relative
##   r1           10  26.999    1.147
##   r2           10  23.548    1.000
}
}
